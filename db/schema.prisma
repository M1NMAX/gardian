datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.String
    access_token       String?  @db.String
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.String
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    name          String
    email         String?      @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role         @default(USER)
    accounts      Account[]
    sessions      Session[]
    groups        Group[]
    collections   Collection[]
}

enum Role {
    USER  @map("user")
    ADMIN @map("admin")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Group {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    User        User         @relation(fields: [userId], references: [id])
    userId      String       @db.ObjectId
    collections Collection[]
}

model Collection {
    id                  String     @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    icon                String     @default("")
    description         String     @default("")
    isFavourite         Boolean    @default(false)
    isDescriptionHidden Boolean    @default(true)
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    Group               Group      @relation(fields: [groupId], references: [id])
    groupId             String     @db.ObjectId
    User                User       @relation(fields: [userId], references: [id])
    userId              String     @db.ObjectId
    items               Item[]
    properties          Property[]
}

type Property {
    id        String       @default(uuid()) @map("_id")
    name      String
    type      PropertyType @default(TEXT)
    values    String[]
    createdAt DateTime     @default(now())
}

enum PropertyType {
    TEXT     @map("text")
    TEXTAREA @map("textarea")
    SELECT   @map("select")
    URL      @map("url")
    DATE     @map("date")
    NUMBER   @map("number")
}

model Item {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Collection   Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String         @db.ObjectId
    properties   ItemProperty[]
}

type ItemProperty {
    id    String @map("_id")
    value String @default("")
}
